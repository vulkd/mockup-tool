# vue-router in html5 mode: https://gist.github.com/szarapka/05ba804dfd1c10ad47bf
# service workers should not be cached when implementing PWA
# https://stackoverflow.com/questions/52283722/configuring-nginx-for-statis-vuejs-site

# Example configs / inspiration:
# https://gist.github.com/plentz/6737338
# https://stackoverflow.com/questions/43453624/how-to-figure-out-a-reasonable-content-security-policy-source-for-nginx-virtual

server {
	listen [::]:80 default_server;
	listen 80 default_server;
	server_name SERVER_NAME;

	# SSL
	# For dev: https://github.com/FiloSottile/mkcert
	# https://www.johnmackenzie.co.uk/post/creating-self-signed-ssl-certificates-for-docker-and-nginx/
	# ssl_certificate /etc/nginx/ssl/byzantine.test.test.crt;
	# ssl_certificate_key /etc/nginx/ssl/byzantine.test.test.key;
	# # enable session resumption to improve https performance
	# # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
	# ssl_session_cache shared:SSL:50m;
	# ssl_session_timeout 1d;
	# ssl_session_tickets off;
	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits

	# to generate your dhparam.pem file, run in the terminal
	# openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
	# ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	# Hide identifying tokens
	server_tokens off;

	# Headers
	add_header X-Frame-Options "DENY"; # https://geekflare.com/add-x-frame-options-nginx/
	add_header X-XSS-Protection "1; mode=block"; # # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
	add_header X-Content-Type-Options nosniff;
	add_header Referrer-Policy "origin";
	# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
	add_header Content-Security-Policy "default-src 'self'; script-src 'self' data: https://js.stripe.com; connect-src 'self' https://api.stripe.com; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; frame-src 'self' https://*.stripe.com https://stripe.com; frame-ancestors 'none'; report-uri /api/report-violation; block-all-mixed-content";

	# GZIP
	gzip on;
	gzip_disable "msie6";
	gzip_comp_level 6;
	gzip_proxied any;
	gzip_buffers 16 8k;
	gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss+xml image/svg+xml;
	gzip_http_version 1.0; # we want to gzip http 1.0 requests, too, so lower the level required
	gzip_min_length 50;

	# LOGS
	access_log /var/log/nginx/access.log combined;
	error_log /var/log/nginx/error.log warn;

	root /etc/nginx/html;

	location / {
		# index index.html;

		# proxy_intercept_errors on;
		# error_page 404 /index.html;

		# try_files $uri /index.html =404;
		# try_files $uri $uri/ /index.html;
		# try_files $uri $uri/ rewrite (.*) index.html last =404;
		# try_files $uri $uri/ @rewrites;
		try_files $uri $uri/ /index.html;
	}

	location ^~ /api/ {
		autoindex off;

		# https://github.com/qbittorrent/qBittorrent/issues/6962

		proxy_pass http://byzantine_node_1:3000/;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $http_host;
		proxy_redirect off;
		client_max_body_size 20M; # client_max_body_size is the max image size, basically
	}

	# location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
		# 	# Some basic cache-control for static files to be sent to the browser
		# 	gzip on;
		# 	gzip_comp_level 9;
		# 	expires max;
		# 	add_header Pragma public;
		# 	add_header Cache-Control "public, must-revalidate, proxy-revalidate";
		# }
	}




# # vue-router in html5 mode: https://gist.github.com/szarapka/05ba804dfd1c10ad47bf
# # service workers should not be cached when implementing PWA
# # https://stackoverflow.com/questions/52283722/configuring-nginx-for-statis-vuejs-site

# # Example configs / inspiration:
# # https://gist.github.com/plentz/6737338
# # https://stackoverflow.com/questions/43453624/how-to-figure-out-a-reasonable-content-security-policy-source-for-nginx-virtual

# server {
# 	listen [::]:80 default_server;
# 	listen 80 default_server;
# 	server_name seydaneen.com;
# 	rewrite ^ https://$server_name$request_uri? permanent;
# }

# server {
# 	listen [::]:443 ssl http2;
# 	listen 443 ssl http2;
# 	server_name byzantine.test.test;

# 	# SSL
# 	# For dev: https://github.com/FiloSottile/mkcert
# 	# https://www.johnmackenzie.co.uk/post/creating-self-signed-ssl-certificates-for-docker-and-nginx/
# 	ssl_certificate /etc/nginx/ssl/byzantine.test.test.crt;
# 	ssl_certificate_key /etc/nginx/ssl/byzantine.test.test.key;
# 	# enable session resumption to improve https performance
# 	# http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
# 	ssl_session_cache shared:SSL:50m;
# 	ssl_session_timeout 1d;
# 	ssl_session_tickets off;
# 	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits

# 	# to generate your dhparam.pem file, run in the terminal
# 	# openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
# 	# ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# 	# Hide identifying tokens
# 	server_tokens off;

# 	# Headers
# 	add_header X-Frame-Options "DENY"; # https://geekflare.com/add-x-frame-options-nginx/
# 	add_header X-XSS-Protection "1; mode=block"; # # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# 	add_header X-Content-Type-Options nosniff;
# 	add_header Referrer-Policy "origin";
# 	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
# 	add_header Content-Security-Policy "default-src 'self'; script-src 'self' data: https://js.stripe.com; connect-src 'self' https://api.stripe.com; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; frame-src 'self' https://*.stripe.com https://stripe.com; frame-ancestors 'none'; report-uri /api/report-violation; block-all-mixed-content";

# 	# GZIP
# 	gzip on;
# 	gzip_disable "msie6";
# 	gzip_comp_level 6;
# 	gzip_proxied any;
# 	gzip_buffers 16 8k;
# 	gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss+xml image/svg+xml;
# 	gzip_http_version 1.0; # we want to gzip http 1.0 requests, too, so lower the level required
# 	gzip_min_length 50;

# 	# LOGS
# 	access_log /var/log/nginx/access.log combined;
# 	error_log /var/log/nginx/error.log warn;

# 	root /etc/nginx/html;

# 	location / {
# 		# index index.html;

# 		# proxy_intercept_errors on;
# 		# error_page 404 /index.html;

# 		# try_files $uri /index.html =404;
# 		# try_files $uri $uri/ /index.html;
# 		# try_files $uri $uri/ rewrite (.*) index.html last =404;
# 		try_files $uri $uri/ @rewrites;
# 		# try_files $uri $uri/ /index.html;
# 	}

# 	location @rewrites {
# 		rewrite ^(.+)$ /index.html last;
# 	}

# 	location ^~ /api/ {
# 		autoindex off;

# 		# https://github.com/qbittorrent/qBittorrent/issues/6962

# 		proxy_pass http://byzantine_node_1:3000/;
# 		proxy_set_header X-Real-IP $remote_addr;
# 		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# 		proxy_set_header Host $http_host;
# 		proxy_redirect off;
# 		client_max_body_size 20M; # client_max_body_size is the max image size, basically
# 	}

# 	# location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
# 		# 	# Some basic cache-control for static files to be sent to the browser
# 		# 	gzip on;
# 		# 	gzip_comp_level 9;
# 		# 	expires max;
# 		# 	add_header Pragma public;
# 		# 	add_header Cache-Control "public, must-revalidate, proxy-revalidate";
# 		# }
# 	}

